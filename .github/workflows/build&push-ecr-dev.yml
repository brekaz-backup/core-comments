name: deployment microservice
on: 
  push:
    branches:
      - dev
env:
  # CLI envs
  KUBECTL_VERSION: v1.26.2

  # Project envs
  LANGUAGE: node
  LANGUAGE_VERSION: 1.19
  WORKING_DIRECTORY: .
  NAME_UPPERCASE: ${{vars.NAME_UPPERCASE}}
  NAME_LOWERCASE: ${{vars.NAME_LOWERCASE}}
  READY_TESTING: NON

  # Cloud envs aws
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

  # ECR credentials
  AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}

  # Docker image info
  DOCKER_FILE_PATH: zarf/docker/
  DOCKER_FILE_NAME: Dockerfile

  # Deployment variables
  K8S_NS_DEV: development
  K8S_NS_PND: production
  K8S_CPORT: 3001
  K8S_C_GRAPHQL_PORT: 5001
  IMAGE_TAG: ${{ github.sha }}

  # EKS variables
  EKS_CLUSTER_CHAT_PDN: prod-eks-chat-services
  EKS_CLUSTER_CHAT_DEV: dev-eks-chat-services
  
  AWS_SG_ID: ${{ secrets.AWS_PIPELINE_SG_ID }}
  AWS_SM_PIPELINE_ID: prod/credentials/server/pipeline
  AWS_SM_PROD_ID: dev/credentials/server/core/general

  SG_PATH: ${{ vars.SG_PATH}}
  SG_COMMAND_RESTART: 'sh /home/ubuntu/app/update_sg.sh'

  APP_PATH: ${{vars.APP_PATH}}
  # APP_COMMAND_RESTART: 'docker compose pull && docker compose up --build -d && curl localhost:3006'
  APP_COMMAND_RESTART: 'docker compose pull && docker compose up -d && sleep 5'

jobs:
  continuous-integrate-up-image:
    
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: CD - UP - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: CD - UP - Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: CD - UP - Build, tag, and push image to Amazon AWS_ECR_REGISTRY
        id: build-image
        env:
          ECR_REGISTRY: ${{ env.AWS_ECR_REGISTRY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          IMAGE_NAME: ${{ env.NAME_LOWERCASE }}
          DOCKER_FILE_PATH: ${{ env.DOCKER_FILE_PATH }}
          DOCKER_FILE_NAME: ${{ env.DOCKER_FILE_NAME }}
          TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
        run: |
          # download deps
          mkdir deps
          cd deps
          git clone https://${{ env.TOKEN_GITHUB }}@github.com/blumerapi/blumer-lib-auth-rs.git
          cd blumer-lib-auth-rs
          git checkout 855939996938e7579ed6937b43b0dcb47e6195fe
          cd ..
          git clone https://${{ env.TOKEN_GITHUB }}@github.com/blumerapi/blumer-lib-errors.git
          cd blumer-lib-errors
          git checkout 83d2689a92c4f81b9ed5b167689632603c2dfce3
          cd ..
          git clone https://${{ env.TOKEN_GITHUB }}@github.com/blumerapi/blumer-lib-authorization-rs.git
          cd ..
          # Build docker image
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG -f $DOCKER_FILE_NAME ./
          
          # Tag docker image
          docker tag $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG $ECR_REGISTRY/$IMAGE_NAME:latest
          # Push docker image to AWS ECR
          docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          docker push $ECR_REGISTRY/$IMAGE_NAME:latest

  continuous-delivery:
    runs-on: ubuntu-latest
    needs: [
      continuous-integrate-up-image
    ]
    steps:
      - name: CD - DPY - checkout code
        uses: actions/checkout@v3
      - name: CD - DPY - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: CD - DPY - Find Secrets manager of pipeline server
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id ${{ env.AWS_SM_PIPELINE_ID }} --query SecretString --output text)
          EC2_PIPELINE_USER=$(echo "$SECRET_JSON" | jq -r '.server_username')
          EC2_PIPELINE_PASS=$(echo "$SECRET_JSON" | jq -r '.server_password')
          EC2_PIPELINE_IP=$(echo "$SECRET_JSON" | jq -r '.server_ip')
          echo "EC2_PIPELINE_USER=$EC2_PIPELINE_USER" >> $GITHUB_ENV
          echo "EC2_PIPELINE_PASS=$EC2_PIPELINE_PASS" >> $GITHUB_ENV
          echo "EC2_PIPELINE_IP=$EC2_PIPELINE_IP" >> $GITHUB_ENV
      - name: CD - DPY - Find Secrets manager of pipeline server
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id ${{ env.AWS_SM_PROD_ID }} --query SecretString --output text)
          EC2_PROD_SERVER_USER=$(echo "$SECRET_JSON" | jq -r '.ms_general_server_ssh_username')
          EC2_PROD_SERVER_PEM=$(echo "$SECRET_JSON" | jq -r '.ms_general_server_ssh_pem')
          EC2_PROD_SERVER_IP=$(echo "$SECRET_JSON" | jq -r '.ms_general_server_private_ip')
          echo "EC2_PROD_SERVER_USER=$EC2_PROD_SERVER_USER" >> $GITHUB_ENV
          echo "EC2_PROD_SERVER_PEM=$EC2_PROD_SERVER_PEM" >> $GITHUB_ENV
          echo "EC2_PROD_SERVER_IP=$EC2_PROD_SERVER_IP" >> $GITHUB_ENV
      - name: Get Public IP
        run: |
          JOB_PUBLIC_IP=$(dig +short myip.opendns.com @resolver1.opendns.com)
          echo "Public IP: $JOB_PUBLIC_IP"
          echo "JOB_PUBLIC_IP=$JOB_PUBLIC_IP" >> $GITHUB_ENV

      - name: AWS Security group Add Github Actions IP
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ env.AWS_SG_ID }} --protocol tcp --port 22 --cidr "${{ env.JOB_PUBLIC_IP }}/32"

      - name: SSH run script to delivery
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_PIPELINE_IP }}
          username: ${{ env.EC2_PIPELINE_USER }}
          password: ${{ env.EC2_PIPELINE_PASS }}
          script: |
            cd /home/ubuntu && ./pipeline.sh ${{ env.EC2_PROD_SERVER_USER }} ${{ env.EC2_PROD_SERVER_IP }} ./keys/${{ env.EC2_PROD_SERVER_PEM }}.pem ${{ env.APP_PATH }} '${{ env.APP_COMMAND_RESTART }}'

      - name: SSH run script to delivery - restart Super Graph
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_PIPELINE_IP }}
          username: ${{ env.EC2_PIPELINE_USER }}
          password: ${{ env.EC2_PIPELINE_PASS }}
          script: |
            cd /home/ubuntu && ./pipeline.sh ${{ env.EC2_PROD_SERVER_USER }} ${{ env.EC2_PROD_SERVER_IP }} ./keys/${{ env.EC2_PROD_SERVER_PEM }}.pem ${{ env.SG_PATH }} '${{ env.SG_COMMAND_RESTART }}'
        if: contains(github.event.head_commit.message, 'feat:rebuild:') || contains(github.event.head_commit.message, 'fix:rebuild:')
            
      - name: Remove Github Actions IP from security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ env.AWS_SG_ID }} --protocol tcp --port 22 --cidr "${{ env.JOB_PUBLIC_IP }}/32"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        if: always()
